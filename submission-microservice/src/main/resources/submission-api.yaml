openapi: 3.0.0
info:
  title: EasyConf Conference Management System
  description: API for Paper Submission Microservice
  version: 1.0.0

servers:
  - url: https://localhost:8084

tags:
  - name: submission
    description: Everything about your submissions
  - name: statistics
    description: Statistics

paths:
  /submission:
    get:
      security:
        - api_key: [ ]
      summary: Get all submissions, optionally filtered.
      description: |
        Filters are combined in an AND-like fashion, for example:
          `GET /submission?track=123&status=open`
        will fetch all submissions on track 123 that have the status `open`
      tags:
        - submission
      parameters:

        - name: submittedBy
          description: Filter by the id of the person who submitted the submission
          schema:
            type: integer
            format: int64
          in: query

        - name: authors
          description: Filter by author id
          schema:
            type: array
            items:
              type: integer
              format: int64
          in: query

        - name: title
          description: Filter by submission title
          schema:
            type: string
          in: query

        - name: keywords
          description: Filters by keywords
          schema:
            type: array
            items:
              type: string
          in: query

        - name: trackId
          description: Filter by track id
          schema:
            type: integer
            format: int64
          in: query

        - name: eventId
          description: Filter by event id
          schema:
            type: integer
            format: int64
          in: query

        - name: type
          description: Filter by submission type
          schema:
            $ref: '#/components/schemas/PaperType'
          in: query

      responses:
        '200':
          description: Search successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'

    post:
      security:
        - api_key: [ ]
      tags:
        - submission
      summary: Add a new submission to the system
      description: Add a new submission to the system
      operationId: addSubmission
      requestBody:
        content:
          #          application/json:
          #            schema:
          #              $ref: '#/components/schemas/Submission'
          #          application/xml:
          #            schema:
          #              $ref: '#/components/schemas/Submission'
          #          application/x-www-form-urlencoded:
          #            schema:
          #              $ref: '#/components/schemas/Submission'
          multipart/form-data:
            schema:
              type: object
              properties:
                submissionData:
                  type: string
                  description: "Stringified JSON of submission data"
                file:
                  type: string
                  format: binary
                  description: "Text file to upload"
        required: true
      responses:

        '201':
          description: Successfully created
          headers:
            Location:
              description: The URL of the created submission
              schema:
                type: string
                format: url
          content:

            application/json:
              schema:
                type: string

            application/xml:
              schema:
                type: string

        '400':
          description: Badly formatted input
        '403':
          description: Deadline passed
        '409':
          description: A submission with such a title already exists in this event

  /submission/{submissionId}:
    get:
      security:
        - api_key: [ ]
      tags:
        - submission
      summary: Find submission by ID
      description: Returns a single submission
      operationId: getSubmissionById
      parameters:
        - $ref: '#/components/parameters/SubmissionId'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
            application/xml:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: Invalid ID supplied
        '404':
          description: Submission not found

    put:
      security:
        - api_key: [ ]
      tags:
        - submission
      summary: Partially update a submission in the system
      parameters:
        - $ref: '#/components/parameters/SubmissionId'
      requestBody:
        content:

          application/json:
            schema:
              $ref: '#/components/schemas/Submission'

          application/xml:
            schema:
              $ref: '#/components/schemas/Submission'

          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Submission'

        required: true
      responses:
        '200':
          description: Successfully updated submission
          content:

            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

            application/xml:
              schema:
                $ref: '#/components/schemas/Submission'

            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Submission'

        '404':
          description: Submission id not found
        '400':
          description: Badly formatted request
        '403':
          description: Deadline passed
        '409':
          description: A submission with such a title already exists in this event


    delete:
      security:
        - api_key: [ ]
      tags:
        - submission
      summary: Deletes a submission
      description: delete a submission
      operationId: deleteSubmission
      parameters:
        - $ref: '#/components/parameters/SubmissionId'
      responses:
        '204':
          description: Deletion successful
        '400':
          description: Submission not found
  /stats:
    get:
      description: Get global statistics
      responses:
        '200':
          description: Statistics OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
      security:
        - api_key: [ ]
      tags:
        - statistics
  /stats/event/{eventId}:
    get:
      description: Get statistics of this event
      operationId: eventStatisticsGet
      security:
        - api_key: [ ]
      tags:
        - statistics
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '200':
          description: Statistics OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        '400':
          description: Event not found

  /stats/track/{trackId}:
    get:
      description: Get statistics of this track
      operationId: trackStatisticsGet
      security:
        - api_key: [ ]
      tags:
        - statistics
      parameters:
        - $ref: '#/components/parameters/TrackId'
      responses:
        '200':
          description: Statistics OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        '400':
          description: Track not found

components:
  parameters:
    SubmissionId:
      name: submissionId
      in: path
      description: ID of submission to return
      required: true
      schema:
        type: integer
        format: int64
    TrackId:
      name: trackId
      in: path
      required: true
      description: Id of the track
      schema:
        type: integer
        format: int64
      example: 1
    EventId:
      name: eventId
      in: path
      required: true
      description: Id of the event
      schema:
        type: integer
        format: int64
      example: 1
  schemas:
    Role:
      type: string
      enum:
        - general_chair
        - pc_chair
        - sub_reviewer
        - author
        - attendee
    SubmissionStatus:
      type: string
      description: Submission Status
      example: accepted
      enum:
        - accepted
        - rejected
        - underReview
        - withdrawn
        - open

    Submission:
      x-class-extra-annotation: "@javax.persistence.Entity"
      type: object
      properties:

        id:
          type: integer
          format: int64
          uniqueItems: true
          x-field-extra-annotation: "@javax.persistence.Id"

        submittedBy:
          type: integer
          format: int64
          description: The ID of the author that submitted this paper

        authors:
          type: array
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=Long.class)"
          items:
            type: integer
            format: int64

        title:
          type: string
          example: "Paper title"

        textFilePath:
          type: string
          example: "path/to/file"

        keywords:
          type: array
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=String.class)"
          items:
            type: string

        abstract:
          type: string
          maxLength: 2000

        link:
          type: string
          example: "https://github.com/"

        trackId:
          type: integer
          format: int64
          example: 10

        eventId:
          type: integer
          format: int64
          example: 10

        type:
          $ref: '#/components/schemas/PaperType'

        status:
          $ref: "#/components/schemas/SubmissionStatus"

        conflictsOfInterest:
          $ref: '#/components/schemas/ConflictsOfInterest'

        comments:
          type: array
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=String.class)"
          items:
            type: string

        updated:
          type: string
          format: date-time

        created:
          type: string
          format: date-time

      required: [ id, submittedBy, title, authors, abstract, file, created, updated, status, type, trackId, eventId ]
      xml:
        name: submission

    Statistics:
      x-class-extra-annotation: "@javax.persistence.Entity"
      type: object
      properties:
        id:
          type: integer
          format: int64
          uniqueItems: true
          x-field-extra-annotation: "@javax.persistence.Id"
        totalSubmissions:
          type: integer
          format: int64
          default: 0
        open:
          type: integer
          format: int64
          default: 0
        accepted:
          type: integer
          format: int64
          default: 0
        rejected:
          type: integer
          format: int64
          default: 0
        underReview:
          type: integer
          format: int64
          default: 0
        withdrawn:
          type: integer
          format: int64
          default: 0
        averageNumberOfAuthors:
          type: integer
          format: int64
          default: 0
        keywordsCounts:
          $ref: '#/components/schemas/KeywordsCounts'

    Track:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: "track Title 1"
        description:
          type: string
          example: "track 1 is ..., aims to ..."
        submit_deadline:
          type: string
          description: the deadline for all paper submissions
          example: "2022/11/24, 21:59"
        review_deadline:
          type: string
          description: the deadline for all paper reviews
          example: "2022/11/24, 21:59"
        paper_type:
          $ref: '#/components/schemas/PaperType'
        event_id:
          type: integer
          format: int64
          example: 5
    PaperType:
      type: string
      enum:
        - full-paper
        - short-paper
        - position-paper
    KeywordsCounts:
      type: object
      x-class-extra-annotation: "@javax.persistence.Embeddable"
      properties:
        keywords:
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=String.class)"
          type: array
          items:
            type: string
        counts:
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=Long.class)"
          type: array
          items:
            type: integer
            format: int64
    ConflictsOfInterest:
      type: object
      x-class-extra-annotation: "@javax.persistence.Embeddable"
      properties:
        userIds:
          type: array
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=Long.class)"
          items:
            type: integer
            format: int64
        types:
          type: array
          x-field-extra-annotation: "@javax.persistence.ElementCollection(targetClass=String.class)"
          items:
            $ref: "#/components/schemas/ConflictsOfInterestType"
    ConflictsOfInterestType:
      type: string
      enum:
        - author
        - recent-collaborator
        - same-institute-researcher
        - other
    Comment:
      type: object
      x-class-extra-annotation: "@javax.persistence.Entity @javax.persistence.Table(name = \"comment\")"
      properties:
        commentID:
          type: integer
          format: int64
          x-field-extra-annotation: "@javax.persistence.Id @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)"
          description: ID of the comment
          example: 1
        userID:
          type: integer
          format: int64
          description: ID of the reviewer
          example: 1
        reviewID:
          type: integer
          format: int64
          description: ID of the review
          example: 1
        description:
          type: string
          description: Comment description
          example: "The review looks good."
        isConfidential:
          type: boolean
          description: Indicates if the comment is confidential
          example: true
      required:
        - userID
        - reviewID
        - description
        - isConfidential


  securitySchemes:
    api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT
